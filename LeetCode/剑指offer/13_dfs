    boolean[][] visited;
    public int movingCount(int m, int n, int k) {
		int res;
		visited = new boolean[m][n];
		if(m<1||n<1) {
			return 0;
		}
		res = dfs(0,0,m,n,k);
		return res;
    }
	
	public int dfs(int i,int j, int m ,int n,int k) {
		if(i<0||i>m-1||j<0||j>n-1||(i/10+i%10+j/10+j%10)>k||visited[i][j]) {
			return 0 ;
		}
				
		visited[i][j]=true;
		return 1+dfs(i+1,j,m,n,k)+dfs(i,j+1,m,n,k)+dfs(i-1,j,m,n,k)+dfs(i,j-1,m,n,k);
		
			
	}
	
	
    boolean[][] visited;
    int sum=0;
    public int movingCount(int m, int n, int k) {
        int res;
        visited = new boolean[m][n];
        if(m<1||n<1) {
            return 0;
        }
        dfs(0,0,m,n,k);
        return sum;
    }

    public void dfs(int i,int j, int m ,int n,int k) {
        if(i<0||i>m-1||j<0||j>n-1||(i/10+i%10+j/10+j%10)>k||visited[i][j]) {
            return  ;
        }

        visited[i][j]=true;
        sum++;
        dfs(i+1,j,m,n,k);
        dfs(i,j+1,m,n,k);
        dfs(i-1,j,m,n,k);
        dfs(i,j-1,m,n,k);


    }
