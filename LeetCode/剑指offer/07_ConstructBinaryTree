     public static class TreeNode{
		int val;
		TreeNode left;
		TreeNode right;
		
		public TreeNode(int value) {
			this.val = value;
		}
	}
	
	public static TreeNode buildtree (int[] preorder, int[] inorder) {
		if(preorder==null||preorder.length==0) {
			return null;
		}
		int lenth = inorder.length;
		HashMap<Integer, Integer> index = new HashMap<Integer, Integer>();
		for (int i = 0; i < inorder.length; i++) {
			index.put(inorder[i], i);
		}
		return build(preorder,0,inorder,0,lenth-1,index);
		
	}

	public static  TreeNode build(int[]preorder,int prestart, int[] inorder, int instart, int inend, HashMap<Integer, Integer> index) {
		if(instart>inend) {
			return null;
		}
		
		int rootval = preorder[prestart];
		TreeNode root = new TreeNode(rootval);
		
		int rootindex = index.get(rootval);
		int leftlenth = rootindex-instart;
		int rightlenth = inend - rootindex;
		
		TreeNode left = build(preorder,prestart+1,inorder,instart,rootindex-1,index);
		TreeNode right = build(preorder,prestart+leftlenth+1,inorder,rootindex+1,inend,index);
		root.left = left;
		root.right = right;
		
		return root;
	}
	  
